export const mockBluetoothData = {
  messageDIU1: {
    messageType: "Faults",
    faultMessages: ["Battery Over Temperature", "General Battery Fault"],
  },
  messageDIU2: {
    messageType: "Current and Limits",
    batteryCurrent: 150.5,
    driveCurrentLimit: 180,
    regenCurrentLimit: 100,
    vehicleModeRequest: 1,
  },
  messageDIU3: {
    messageType: "Cell Voltages",
    minCellVoltage: 3.4,
    maxCellVoltage: 4.2,
  },
  messageDIU4: {
    messageType: "SOC and Indicators",
    stateOfCharge: 85,
    keyOnIndicator: 1,
    distanceToEmpty: 120,
    batteryMalfunctionLight: 0,
  },
  messageDIU14: {
    messageType: "DIU14 Faults",
    socOrPackVoltageImbalance: 0,
    batterySevUnderVtgAnyBP: 0,
    batterySevOverVtgAnyBP: 0,
    overCurrentAllBP: 1,
    overCurrentAnyBP: 1,
  },
  messageDriveParameters: {
    messageType: "Drive Parameters",
    packVoltage: 72.5,
    noOfActiveBPs: 5,
    noOfCommunicationLossBPs: 0,
    maxCellTemp: 45,
    minCellTemp: 20,
    availableEnergy: 5.7,
  },
  messageMCU1: {
    messageType: "Controller Parameters",
    controllerTemperature: 42,
    motorTemperature: 50,
    rmsCurrent: 85,
    throttle: 60,
    brake: 10,
    speed: 45,
    driveMode: 2,
  },
  messageMCU2: {
    messageType: "Motor Parameters",
    motorRPM: 2800,
    capacitorVoltage: 58.2,
    odometer: 1234.5,
  },
  messageMCU3: {
    messageType: "Controller Faults",
    faultMessages: ["sigFltEncoder", "sigFltMotorHotCutback"],
  },
  gpioStates: {
    messageType: "GPIO",
    states: {
      REV_OUT: false,
      FWD_OUT: true,
      KEY_OUT: true,
      BRAKE_OUT: true,
      LOWB_OUT: true,
      HIGHB_OUT: false,
      LEFT_OUT: true,
      RIGHT_OUT: false,
      SPORTS_OUT: false,
      ECO_OUT: true,
      NEUTRAL_OUT: false,
    },
  },
};